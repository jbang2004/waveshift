name: Deploy Audio Segment Worker (Container)

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild Docker image (ignore cache)'
        required: false
        type: boolean
        default: false
  push:
    paths:
      - 'waveshift-audio-segment-worker/**'
      - '.github/workflows/deploy-audio-segment.yml'
    branches: [main]

# ✅ Cloudflare 2025: 使用本地 Dockerfile，无需外部镜像注册表

jobs:
  deploy-audio-segment:
    runs-on: ubuntu-latest
    name: Build and Deploy Audio Segment Worker
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Worker dependencies
        run: |
          cd waveshift-audio-segment-worker
          npm install


      - name: Generate Cloudflare types
        run: |
          cd waveshift-audio-segment-worker
          npm run cf-typegen || echo "Type generation skipped"

      - name: TypeScript type check
        run: |
          cd waveshift-audio-segment-worker
          npm run type-check || echo "Type check skipped"

      - name: Verify Dockerfile and configuration
        run: |
          cd waveshift-audio-segment-worker
          if [ ! -f Dockerfile ]; then
            echo "❌ Dockerfile not found!"
            exit 1
          fi
          echo "✅ Dockerfile found (Python + FastAPI + pydub)"
          echo "📋 Dockerfile FROM line:"
          grep "FROM" Dockerfile
          echo ""
          echo "📋 wrangler.jsonc container config:"
          grep -A 5 "containers" wrangler.jsonc

      - name: Set R2 Secrets
        run: |
          cd waveshift-audio-segment-worker
          echo "${{ secrets.R2_ACCESS_KEY_ID }}" | npx wrangler secret put R2_ACCESS_KEY_ID
          echo "${{ secrets.R2_SECRET_ACCESS_KEY }}" | npx wrangler secret put R2_SECRET_ACCESS_KEY
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Deploy to Cloudflare Workers (Container)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --compatibility-date 2024-12-01 --keep-vars
          workingDirectory: './waveshift-audio-segment-worker'

      - name: Verify deployment
        run: |
          cd waveshift-audio-segment-worker
          echo "🎯 验证部署状态..."
          
          # 获取部署后的 Worker URL
          WORKER_URL=$(npx wrangler whoami 2>/dev/null | grep "account" | head -1 | cut -d'"' -f4)
          if [ -n "$WORKER_URL" ]; then
            echo "📍 Worker URL: https://waveshift-audio-segment-worker.$WORKER_URL.workers.dev"
          fi
          
          echo "✅ Audio Segment Worker 部署完成！"
          echo ""
          echo "📋 部署信息："
          echo "- 容器构建: 本地 Dockerfile"
          echo "- Cloudflare Worker: waveshift-audio-segment-worker"
          echo "- 构建时间: $(date)"

      - name: Test deployment
        if: success()
        run: |
          sleep 30  # 等待容器启动
          echo "🧪 测试部署的服务..."
          
          # 测试健康检查
          curl -f https://waveshift-audio-segment-worker.jbang20042004.workers.dev/health || echo "Health check failed"
          
          # 测试音频切分接口
          curl -X POST https://waveshift-audio-segment-worker.jbang20042004.workers.dev/segment \
            -H "Content-Type: application/json" \
            -d '{
              "audioKey": "test/sample.mp3",
              "transcripts": [{"sequence": 1, "start": "0m0s0ms", "end": "0m3s0ms", "speaker": "TestSpeaker", "original": "测试", "content_type": "speech"}],
              "outputPrefix": "test/output"
            }' || echo "Segment test failed"

      - name: Post-deployment verification
        if: success()
        run: |
          echo "🎯 验证部署结果..."
          echo "✅ Audio Segment 容器已成功部署到 Cloudflare"
          echo "📦 容器技术栈: Python 3.11 + FastAPI + pydub + ffmpeg"
          echo "🔧 instance_type: standard (4GB RAM)"
          echo ""
          echo "📝 容器特性:"
          echo "- 基础镜像: python:3.11-slim"
          echo "- 音频处理: pydub + ffmpeg"
          echo "- API框架: FastAPI"
          echo "- 存储集成: Cloudflare R2"
          echo ""
          echo "🔍 如需调试容器启动，请检查:"
          echo "- Cloudflare Dashboard → Workers → waveshift-audio-segment-worker → Real-time Logs"
          echo "- 或运行: wrangler tail waveshift-audio-segment-worker"