name: Deploy FFmpeg Worker (Docker Required)

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild Docker image (ignore cache)'
        required: false
        type: boolean
        default: false
  push:
    paths:
      - 'waveshift-ffmpeg-worker/**'
      - '.github/workflows/deploy-ffmpeg-docker.yml'
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/waveshift-ffmpeg-container

jobs:
  deploy-ffmpeg:
    runs-on: ubuntu-latest
    name: Build and Deploy FFmpeg Worker
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './waveshift-ffmpeg-worker/package-lock.json'

      - name: Install Worker dependencies
        run: |
          cd waveshift-ffmpeg-worker
          npm ci

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: node-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-${{ runner.os }}-

      - name: Verify Dockerfile exists
        run: |
          cd waveshift-ffmpeg-worker
          if [ ! -f Dockerfile ]; then
            echo "❌ Dockerfile not found!"
            exit 1
          fi
          echo "✅ Dockerfile found, ready for Cloudflare deployment"
          echo "📋 Dockerfile content preview:"
          head -10 Dockerfile

      - name: Deploy to Cloudflare Workers (Container)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --compatibility-date 2025-06-14 --keep-vars
          workingDirectory: './waveshift-ffmpeg-worker'

      - name: Verify deployment
        run: |
          cd waveshift-ffmpeg-worker
          echo "🎯 验证部署状态..."
          
          # 获取部署后的 Worker URL
          WORKER_URL=$(npx wrangler whoami 2>/dev/null | grep "account" | head -1 | cut -d'"' -f4)
          if [ -n "$WORKER_URL" ]; then
            echo "📍 Worker URL: https://waveshift-ffmpeg-worker.$WORKER_URL.workers.dev"
          fi
          
          echo "✅ FFmpeg Worker 部署完成！"
          echo ""
          echo "📋 部署信息："
          echo "- 容器构建: 本地 Dockerfile"
          echo "- Cloudflare Worker: waveshift-ffmpeg-worker"
          echo "- 构建时间: $(date)"

      - name: Post-deployment verification
        if: success()
        run: |
          echo "🎯 验证部署结果..."
          echo "✅ Cloudflare 将自动构建并部署容器"
          echo "📝 如需调试，请检查 Cloudflare Dashboard 中的日志"